name: CI â€” Lint & Security

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write # Needed for CodeQL

jobs:
  # -----------------------------
  # Detect changed directories
  # -----------------------------
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter paths
        uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  # -----------------------------
  # Frontend Lint
  # -----------------------------
  frontend-lint:
    name: Frontend Lint (ESLint / Prettier / Stylelint)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: npm install -g pnpm
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-frontend-
      - run: pnpm install --frozen-lockfile || pnpm install
        working-directory: frontend
      - run: pnpm dlx eslint "frontend/**/*.{js,jsx,ts,tsx}" --max-warnings=0
      - run: pnpm dlx prettier --check frontend/
      - run: pnpm dlx stylelint "frontend/**/*.{css,scss,html,vue}" --allow-empty-input || true

  # -----------------------------
  # Backend Lint
  # -----------------------------
  backend-lint:
    name: Backend Lint (ESLint / Prettier)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: npm install -g pnpm
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-backend-${{ hashFiles('backend/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-backend-
      - run: pnpm install --frozen-lockfile || pnpm install
        working-directory: backend
      - run: pnpm dlx eslint "backend/**/*.{js,ts}" --max-warnings=0
      - run: pnpm dlx prettier --check backend/

  # -----------------------------
  # Detect hardcoded secrets
  # -----------------------------
  secret-scan:
    name: Detect Hardcoded Secrets
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install git-secrets
        run: |
          sudo apt-get update && sudo apt-get install -y git
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install
          cd ..
          # Add generic patterns for secrets
          git secrets --add 'API[_-]?KEY[=|:][^\s]+'
          git secrets --add 'SECRET[=|:][^\s]+'
          git secrets --add 'PASSWORD[=|:][^\s]+'
          git secrets --add 'TOKEN[=|:][^\s]+'
          git secrets --add 'JWT[=|:][^\s]+'
      - name: Scan repository for secrets
        run: git secrets --scan -r

  # -----------------------------
  # Frontend Trivy scan
  # -----------------------------
  frontend-trivy:
    name: Frontend Trivy image scan
    runs-on: ubuntu-latest
    needs: secret-scan
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t myapp-frontend ./frontend
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'image'
          image-ref: 'myapp-frontend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # -----------------------------
  # Backend Trivy scan
  # -----------------------------
  backend-trivy:
    name: Backend Trivy image scan
    runs-on: ubuntu-latest
    needs: secret-scan
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t myapp-backend ./backend
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'image'
          image-ref: 'myapp-backend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # -----------------------------
  # CodeQL static analysis
  # -----------------------------
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: [frontend-trivy, backend-trivy]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, typescript]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/analyze@v3
