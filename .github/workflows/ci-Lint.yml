name: CI — Lint & Security

on:
  push:
    branches:
      - '**' # ✅ run on all branches
  pull_request:
    branches:
      - '**'
  workflow_dispatch: # ✅ manual run from GitHub UI

permissions:
  contents: read
  security-events: write # for CodeQL

jobs:
  # -----------------------------
  # Frontend Lint
  # -----------------------------
  frontend-lint:
    name: Frontend Lint (ESLint / Prettier / Stylelint)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4 # ✅ install pnpm FIRST
        with:
          version: 9

      - uses: actions/setup-node@v4 # ✅ then setup node with pnpm cache
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml' # ✅ specify the lock file path

      - name: Debug pnpm
        run: |
          echo "Node version:"
          node -v
          echo "npm version:"
          npm -v
          echo "pnpm version:"
          pnpm -v
          echo "pnpm path:"
          which pnpm

      - run: pnpm install --frozen-lockfile || pnpm install

      # Run ESLint
      - run: pnpm eslint "src/**/*.{js,jsx,ts,tsx}" --max-warnings=0

      # Run Prettier
      - run: pnpm prettier --check "src/**/*.{js,jsx,ts,tsx,json,md,css,scss}"

  # -----------------------------
  # Backend Lint
  # -----------------------------
  backend-lint:
    name: Backend Lint (ESLint / Prettier)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4 # ✅ install pnpm FIRST
        with:
          version: 9

      - uses: actions/setup-node@v4 # ✅ then setup node with pnpm cache
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'backend/pnpm-lock.yaml' # ✅ specify the lock file path

      - name: Debug pnpm
        run: |
          echo "Node version:"
          node -v
          echo "npm version:"
          npm -v
          echo "pnpm version:"
          pnpm -v
          echo "pnpm path:"
          which pnpm

      - run: pnpm install --frozen-lockfile || pnpm install

      # Run ESLint
      - run: pnpm eslint "src/**/*.{js,ts}" --max-warnings=0

      # Run Prettier
      - run: pnpm prettier --check "src/**/*.{js,ts,json,md}"

  # -----------------------------
  # Detect hardcoded secrets
  # -----------------------------
  secret-scan:
    name: Detect Hardcoded Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install git-secrets
        run: |
          sudo apt-get update && sudo apt-get install -y git
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install
          cd ..
          git secrets --add 'API[_-]?KEY[=|:][^\s]+'
          git secrets --add 'SECRET[=|:][^\s]+'
          git secrets --add 'PASSWORD[=|:][^\s]+'
          git secrets --add 'TOKEN[=|:][^\s]+'
          git secrets --add 'JWT[=|:][^\s]+'
      - name: Scan repository for secrets
        run: git secrets --scan -r

  # -----------------------------
  # Frontend Trivy scan
  # -----------------------------
  frontend-trivy:
    name: Frontend Trivy image scan
    runs-on: ubuntu-latest
    needs: [frontend-lint, secret-scan]
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t myapp-frontend -f DockerFile ./frontend
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'image'
          image-ref: 'myapp-frontend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # -----------------------------
  # Backend Trivy scan
  # -----------------------------
  backend-trivy:
    name: Backend Trivy image scan
    runs-on: ubuntu-latest
    needs: [backend-lint, secret-scan]
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t myapp-backend -f DockerFile ./backend
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'image'
          image-ref: 'myapp-backend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # -----------------------------
  # CodeQL static analysis
  # -----------------------------
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: [frontend-trivy, backend-trivy]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, typescript]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/analyze@v3
