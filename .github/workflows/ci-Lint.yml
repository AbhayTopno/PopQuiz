name: CI — Lint & Security

on:
  push:
    branches:
      - '**' # ✅ run on all branches
  pull_request:
    branches:
      - '**'
  workflow_dispatch: # ✅ manual run from GitHub UI

permissions:
  contents: read
  security-events: write # for CodeQL

jobs:
  # -----------------------------
  # Linting Stage
  # -----------------------------
  frontend-lint:
    name: Frontend Lint (ESLint / Prettier)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'
      - run: pnpm install --frozen-lockfile || pnpm install
      - run: pnpm eslint "src/**/*.{js,jsx,ts,tsx}" --max-warnings=0
      - run: pnpm prettier --check "src/**/*.{js,jsx,ts,tsx,json,md,css,scss}"

  backend-lint:
    name: Backend Lint (ESLint / Prettier)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'backend/pnpm-lock.yaml'
      - run: pnpm install --frozen-lockfile || pnpm install
      - run: pnpm eslint "src/**/*.{js,ts}" --max-warnings=0
      - run: pnpm prettier --check "src/**/*.{js,ts,json,md}"

  # -----------------------------
  # Validation Stage
  # -----------------------------
  docker-validate:
    name: Dockerfile & Compose Validation
    runs-on: ubuntu-latest
    needs: [frontend-lint, backend-lint]
    steps:
      - uses: actions/checkout@v4
      - name: Create dummy .env files from examples
        run: |
          cp frontend/.env.example frontend/.env
          cp backend/.env.example backend/.env
      - name: Lint Dockerfiles with Hadolint
        run: |
          docker run --rm -v "${{ github.workspace }}:/workspace" --workdir /workspace hadolint/hadolint:latest-debian hadolint --ignore DL3018 frontend/docker/Dockerfile.dev
          docker run --rm -v "${{ github.workspace }}:/workspace" --workdir /workspace hadolint/hadolint:latest-debian hadolint --ignore DL3018 backend/docker/Dockerfile.dev
          docker run --rm -v "${{ github.workspace }}:/workspace" --workdir /workspace hadolint/hadolint:latest-debian hadolint --ignore DL3018 frontend/docker/Dockerfile
          docker run --rm -v "${{ github.workspace }}:/workspace" --workdir /workspace hadolint/hadolint:latest-debian hadolint --ignore DL3018 backend/docker/Dockerfile
      - name: Install yamllint
        run: pip install yamllint
      - name: Lint Docker Compose YAML files
        run: yamllint docker-compose/
      - name: Validate Docker Compose configurations
        run: |
          cd docker-compose
          for file in dev.yml production.yml staging.yml; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              docker compose -f "$file" config -q
            else
              echo "Skipping $file (file not found)"
            fi
          done

  k8s-validate:
    name: Kubernetes Manifests & Helm Validation
    runs-on: ubuntu-latest
    needs: [docker-validate]
    steps:
      - uses: actions/checkout@v4
      - name: Install validation tools
        run: |
          sudo apt-get update -y && sudo apt-get install -y curl tar
          # kubeconform
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          sudo mv kubeconform /usr/local/bin/
          # kube-linter
          curl -L https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz
          sudo mv kube-linter /usr/local/bin/
          # kubescape
          curl -L -o kubescape https://github.com/kubescape/kubescape/releases/latest/download/kubescape-ubuntu-latest
          chmod +x kubescape
          sudo mv kubescape /usr/local/bin/
          # helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Validate manifests with kubeconform
        run: kubeconform -summary -strict -skip CustomResourceDefinition,VerticalPodAutoscaler -ignore-missing-schemas k8s/base/ k8s/autoscaling/ k8s/blue-green/ k8s/canary/
      - name: Lint manifests with kube-linter
        run: kube-linter lint k8s/base/
      - name: Security scan with Kubescape
        run: kubescape scan k8s/base/ --format junit --output results.xml
      - name: Lint Helm chart
        run: helm lint ./k8s/helm/popquiz-chart

  # -----------------------------
  # Security Scanning Stage
  # -----------------------------
  secret-scan:
    name: Detect Hardcoded Secrets
    runs-on: ubuntu-latest
    needs: [frontend-lint, backend-lint]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          extra_args: --regex --entropy --json

  frontend-trivy:
    name: Frontend Trivy Image Scan
    runs-on: ubuntu-latest
    needs: [secret-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend Docker image
        run: docker build -t myapp-frontend -f frontend/docker/Dockerfile ./frontend
      - name: Scan frontend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'myapp-frontend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  backend-trivy:
    name: Backend Trivy Image Scan
    runs-on: ubuntu-latest
    needs: [secret-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Build backend Docker image
        run: docker build -t myapp-backend -f backend/docker/Dockerfile ./backend
      - name: Scan backend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'myapp-backend'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # -----------------------------
  # Final Analysis Stage
  # -----------------------------
  codeql:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    needs: [k8s-validate, frontend-trivy, backend-trivy]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, typescript]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/analyze@v3
